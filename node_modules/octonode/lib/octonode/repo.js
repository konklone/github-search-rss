// Generated by CoffeeScript 1.6.3
(function() {
  var Repo,
    __slice = [].slice;

  Repo = (function() {
    function Repo(name, client) {
      this.name = name;
      this.client = client;
    }

    Repo.prototype.info = function(cb) {
      return this.client.get("/repos/" + this.name, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo info error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.collaborators = function(cbOrUser, cb) {
      if ((cb != null) && typeof cbOrUser !== 'function') {
        return this.hasCollaborator(cbOrUser, cb);
      } else {
        cb = cbOrUser;
        return this.client.get("repos/" + this.name + "/collaborators", function(err, s, b, h) {
          if (err) {
            return cb(err);
          }
          if (s !== 200) {
            return cb(new Error("Repo collaborators error"));
          } else {
            return cb(null, b, h);
          }
        });
      }
    };

    Repo.prototype.hasCollaborator = function(user, cb) {
      return this.client.get("repos/" + this.name + "/collaborators/" + user, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        return cb(null, s === 204, h);
      });
    };

    Repo.prototype.commits = function(cb) {
      return this.client.get("/repos/" + this.name + "/commits", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo commits error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.commit = function(sha, cb) {
      return this.client.get("/repos/" + this.name + "/commits/" + sha, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo commits error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.tags = function(cb) {
      return this.client.get("/repos/" + this.name + "/tags", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo tags error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.releases = function(cb) {
      return this.client.get("/repos/" + this.name + "/releases", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo releases error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.languages = function(cb) {
      return this.client.get("/repos/" + this.name + "/languages", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo languages error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.contributors = function(cb) {
      return this.client.get("/repos/" + this.name + "/contributors", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo contributors error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.teams = function(cb) {
      return this.client.get("/repos/" + this.name + "/teams", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo teams error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.branches = function(cb) {
      return this.client.get("/repos/" + this.name + "/branches", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo branches error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.issue = function(numberOrIssue, cb) {
      if (typeof cb === 'function' && typeof numberOrIssue === 'object') {
        return this.createIssue(numberOrIssue, cb);
      } else {
        return this.client.issue(this.name, numberOrIssue);
      }
    };

    Repo.prototype.issues = function() {
      var cb, params, _i, _ref;
      params = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      return (_ref = this.client).get.apply(_ref, ["/repos/" + this.name + "/issues"].concat(__slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo issues error"));
        } else {
          return cb(null, b, h);
        }
      }]));
    };

    Repo.prototype.createIssue = function(issue, cb) {
      return this.client.post("/repos/" + this.name + "/issues", issue, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 201) {
          return cb(new Error("Repo createIssue error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.readme = function(cbOrRef, cb) {
      if ((cb == null) && cbOrRef) {
        cb = cbOrRef;
        cbOrRef = 'master';
      }
      return this.client.get("/repos/" + this.name + "/readme", {
        ref: cbOrRef
      }, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo readme error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.contents = function(path, cbOrRef, cb) {
      if ((cb == null) && cbOrRef) {
        cb = cbOrRef;
        cbOrRef = 'master';
      }
      return this.client.get("/repos/" + this.name + "/contents/" + path, {
        ref: cbOrRef
      }, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo contents error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.createContents = function(path, message, content, cbOrBranch, cb) {
      if ((cb == null) && cbOrBranch) {
        cb = cbOrBranch;
        cbOrBranch = 'master';
      }
      return this.client.put("/repos/" + this.name + "/contents/" + path, {
        branch: cbOrBranch,
        message: message,
        content: new Buffer(content).toString('base64')
      }, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 201) {
          return cb(new Error("Repo createContents error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.updateContents = function(path, message, content, sha, cbOrBranch, cb) {
      if ((cb == null) && cbOrBranch) {
        cb = cbOrBranch;
        cbOrBranch = 'master';
      }
      return this.client.put("/repos/" + this.name + "/contents/" + path, {
        branch: cbOrBranch,
        message: message,
        content: new Buffer(content).toString('base64'),
        sha: sha
      }, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo updateContents error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.deleteContents = function(path, message, sha, cbOrBranch, cb) {
      if ((cb == null) && cbOrBranch) {
        cb = cbOrBranch;
        cbOrBranch = 'master';
      }
      return this.client.del("/repos/" + this.name + "/contents/" + path, {
        branch: cbOrBranch,
        message: message,
        sha: sha
      }, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo deleteContents error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.archive = function(format, cbOrRef, cb) {
      if ((cb == null) && cbOrRef) {
        cb = cbOrRef;
        cbOrRef = 'master';
      }
      return this.client.get("/repos/" + this.name + "/" + format + "/" + cbOrRef, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 302) {
          return cb(new Error("Repo archive error"));
        } else {
          return cb(null, h['Location'], h);
        }
      });
    };

    Repo.prototype.forks = function(cb) {
      return this.client.get("/repos/" + this.name + "/forks", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo forks error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.blob = function(sha, cb) {
      return this.client.get("/repos/" + this.name + "/git/blobs/" + sha, {
        Accept: 'application/vnd.github.raw'
      }, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo blob error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.tree = function(sha, cbOrRecursive, cb) {
      var param;
      if ((cb == null) && cbOrRecursive) {
        cb = cbOrRecursive;
        cbOrRecursive = false;
      }
      if (cbOrRecursive) {
        param = {
          recursive: 1
        };
      }
      return this.client.get("/repos/" + this.name + "/git/trees/" + sha, param, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo tree error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.destroy = function() {
      var _this = this;
      return this.client.del("/repos/" + this.name, {}, function(err, s, b, h) {
        if ((err != null) || s !== 204) {
          return _this.destroy();
        }
      });
    };

    Repo.prototype.pr = function(numberOrPr, cb) {
      if (typeof cb === 'function' && typeof numberOrPr === 'object') {
        return this.createPr(numberOrPr, cb);
      } else {
        return this.client.pr(this.name, numberOrPr);
      }
    };

    Repo.prototype.prs = function() {
      var cb, params, _i, _ref;
      params = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      return (_ref = this.client).get.apply(_ref, ["/repos/" + this.name + "/pulls"].concat(__slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo prs error"));
        } else {
          return cb(null, b, h);
        }
      }]));
    };

    Repo.prototype.createPr = function(pr, cb) {
      return this.client.post("/repos/" + this.name + "/pulls", pr, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 201) {
          return cb(new Error("Repo createPr error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.hooks = function(cb) {
      return this.client.get("/repos/" + this.name + "/hooks", function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo hooks error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.hook = function(hookInfo, cb) {
      return this.client.post("/repos/" + this.name + "/hooks", hookInfo, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 201) {
          return cb(new Error("Repo createHook error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.statuses = function(ref, cb) {
      return this.client.get("/repos/" + this.name + "/statuses/" + ref, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo statuses error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.status = function(sha, obj, cb) {
      return this.client.post("/repos/" + this.name + "/statuses/" + sha, obj, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 201) {
          return cb(new Error("Repo status error"));
        } else {
          return cb(null, b, h);
        }
      });
    };

    Repo.prototype.stargazers = function() {
      var cb, params, _i, _ref;
      params = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      return (_ref = this.client).get.apply(_ref, ["/repos/" + this.name + "/stargazers"].concat(__slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error("Repo stargazers error"));
        } else {
          return cb(null, b, h);
        }
      }]));
    };

    return Repo;

  })();

  module.exports = Repo;

}).call(this);
